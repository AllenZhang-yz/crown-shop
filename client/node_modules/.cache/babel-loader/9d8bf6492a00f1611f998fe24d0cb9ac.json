{"ast":null,"code":"import { UserActionTypes } from './userActionTypes';\nconst initialState = {\n  currentUser: null\n};\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UserActionTypes.GOOGLE_SIGN_IN_SUCCESS:\n    case UserActionTypes.EMAIL_SIGN_IN_SUCCESS:\n      if (action.payload) {\n        return { ...state,\n          currentUser: action.payload\n        };\n      }\n\n      return state;\n\n    case UserActionTypes.GOOGLE_SIGN_IN_FAILURE:\n    case UserActionTypes.EMAIL_SIGN_IN_FAILURE:\n      if (action.payload) {\n        return { ...state,\n          error: action.payload\n        };\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;","map":{"version":3,"sources":["/Users/yuzhang/Documents/learning/crown-clothing/src/redux/user/userReducer.ts"],"names":["UserActionTypes","initialState","currentUser","userReducer","state","action","type","GOOGLE_SIGN_IN_SUCCESS","EMAIL_SIGN_IN_SUCCESS","payload","GOOGLE_SIGN_IN_FAILURE","EMAIL_SIGN_IN_FAILURE","error"],"mappings":"AACA,SAASA,eAAT,QAAgC,mBAAhC;AAiBA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,WAAW,EAAE;AADkB,CAAjC;;AAGA,MAAMC,WAAsE,GAAG,CAC7EC,KAAK,GAAGH,YADqE,EAE7EI,MAF6E,KAG1E;AACH,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,eAAe,CAACO,sBAArB;AACA,SAAKP,eAAe,CAACQ,qBAArB;AACE,UAAIH,MAAM,CAACI,OAAX,EAAoB;AAClB,eAAO,EACL,GAAGL,KADE;AAELF,UAAAA,WAAW,EAAEG,MAAM,CAACI;AAFf,SAAP;AAID;;AACD,aAAOL,KAAP;;AACF,SAAKJ,eAAe,CAACU,sBAArB;AACA,SAAKV,eAAe,CAACW,qBAArB;AACE,UAAIN,MAAM,CAACI,OAAX,EAAoB;AAClB,eAAO,EACL,GAAGL,KADE;AAELQ,UAAAA,KAAK,EAAEP,MAAM,CAACI;AAFT,SAAP;AAID;;AACD,aAAOL,KAAP;;AACF;AACE,aAAOA,KAAP;AApBJ;AAsBD,CA1BD;;AA4BA,eAAeD,WAAf","sourcesContent":["import { Action, Reducer } from 'redux';\nimport { UserActionTypes } from './userActionTypes';\n\nexport interface ICurrentUser {\n  id: string;\n  [key: string]: string;\n}\n\nexport interface IUserState {\n  currentUser: ICurrentUser | null;\n  error?: string;\n}\n\nexport interface IAction<T, U> extends Action {\n  type: string;\n  payload?: T | U;\n}\n\nconst initialState: IUserState = {\n  currentUser: null,\n};\nconst userReducer: Reducer<IUserState, IAction<ICurrentUser | null, string>> = (\n  state = initialState,\n  action: IAction<ICurrentUser | null, string>\n) => {\n  switch (action.type) {\n    case UserActionTypes.GOOGLE_SIGN_IN_SUCCESS:\n    case UserActionTypes.EMAIL_SIGN_IN_SUCCESS:\n      if (action.payload) {\n        return {\n          ...state,\n          currentUser: action.payload,\n        };\n      }\n      return state;\n    case UserActionTypes.GOOGLE_SIGN_IN_FAILURE:\n    case UserActionTypes.EMAIL_SIGN_IN_FAILURE:\n      if (action.payload) {\n        return {\n          ...state,\n          error: action.payload as string,\n        };\n      }\n      return state;\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n"]},"metadata":{},"sourceType":"module"}